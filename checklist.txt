# Mine to Mill Reconciliation Web App - Development Checklist

## Project Setup

### Project Initialization
- [x] 1. Create new GCP project
      * Project ID: mine-to-mill-recon-jg-2024
      * Project Name: Mine to Mill Recon
      * Created on: March 9, 2025
      * Project Number: 296919560075
      * Creation command: `gcloud projects create mine-to-mill-recon-jg-2024 --name="Mine to Mill Recon"`
      * Set as active project using: `gcloud config set project mine-to-mill-recon-jg-2024`
      * Billing account linked via Google Cloud Console
- [x] 2. Enable necessary APIs (Cloud SQL, Cloud Run, Firebase)
      * Cloud Run API: `gcloud services enable run.googleapis.com`
      * Firebase Management API: `gcloud services enable firebase.googleapis.com`
      * Cloud Firestore API: `gcloud services enable firestore.googleapis.com`
      * Cloud Storage API: `gcloud services enable storage.googleapis.com`
      * Identity and Access Management API: `gcloud services enable iam.googleapis.com`
      * Secret Manager API: `gcloud services enable secretmanager.googleapis.com`
      * Cloud Monitoring API: `gcloud services enable monitoring.googleapis.com`
      * Cloud Logging API: `gcloud services enable logging.googleapis.com`
      * Cloud SQL Admin API: `gcloud services enable sqladmin.googleapis.com`
      * Cloud SQL: `gcloud services enable sql-component.googleapis.com`
      * Verification command: `gcloud services list --enabled --project=mine-to-mill-recon-jg-2024`
- [x] 3. Set up IAM permissions
      * Created service accounts:
        - m2m-backend-sa: `gcloud iam service-accounts create m2m-backend-sa --display-name="Mine to Mill Backend Service Account" --description="Service account for the Mine to Mill Reconciliation backend API"`
        - m2m-db-sa: `gcloud iam service-accounts create m2m-db-sa --display-name="Mine to Mill Database Service Account" --description="Service account for database operations in the Mine to Mill Reconciliation system"`
        - m2m-storage-sa: `gcloud iam service-accounts create m2m-storage-sa --display-name="Mine to Mill Storage Service Account" --description="Service account for storage operations in the Mine to Mill Reconciliation system"`
      * Assigned roles:
        - m2m-backend-sa: 
          * `gcloud projects add-iam-policy-binding mine-to-mill-recon-jg-2024 --member="serviceAccount:m2m-backend-sa@mine-to-mill-recon-jg-2024.iam.gserviceaccount.com" --role="roles/run.invoker"`
          * `gcloud projects add-iam-policy-binding mine-to-mill-recon-jg-2024 --member="serviceAccount:m2m-backend-sa@mine-to-mill-recon-jg-2024.iam.gserviceaccount.com" --role="roles/secretmanager.secretAccessor"`
          * `gcloud projects add-iam-policy-binding mine-to-mill-recon-jg-2024 --member="serviceAccount:m2m-backend-sa@mine-to-mill-recon-jg-2024.iam.gserviceaccount.com" --role="projects/mine-to-mill-recon-jg-2024/roles/m2m_app_role"`
        - m2m-db-sa: `gcloud projects add-iam-policy-binding mine-to-mill-recon-jg-2024 --member="serviceAccount:m2m-db-sa@mine-to-mill-recon-jg-2024.iam.gserviceaccount.com" --role="roles/cloudsql.client"`
        - m2m-storage-sa: `gcloud projects add-iam-policy-binding mine-to-mill-recon-jg-2024 --member="serviceAccount:m2m-storage-sa@mine-to-mill-recon-jg-2024.iam.gserviceaccount.com" --role="roles/storage.objectAdmin"`
      * Created custom role (m2m_app_role) with permissions for:
        - Custom role definition file: m2m-app-role.yaml
        - Creation command: `gcloud iam roles create m2m_app_role --project=mine-to-mill-recon-jg-2024 --file=m2m-app-role.yaml`
        - Permissions included:
          * cloudsql.instances.connect
          * cloudsql.instances.get
          * run.services.get
          * secretmanager.secrets.get
          * storage.objects.create
          * storage.objects.delete
          * storage.objects.get
          * storage.objects.list
          * storage.objects.update
- [x] 4. Initialize Git repository
      * Repository URL: https://github.com/jonnypaceman/upside30
      * Main branch: main
      * Initial commit: Add project documentation: README.txt and checklist.txt
      * Recent commits:
        - Complete step 3: Set up IAM permissions with service accounts and custom roles
        - Update checklist: Complete steps 1-2 (GCP project creation and API enablement)
      * Local workspace: /Users/jonathangregory/Desktop/upside30/upside30
      * Remote origin: `git remote -v` shows https://github.com/jonnypaceman/upside30
- [x] 5. Set up .gitignore file
      * Created comprehensive .gitignore for full-stack JS/TS project
      * File location: /Users/jonathangregory/Desktop/upside30/upside30/.gitignore
      * Key patterns included:
        - Node.js/Express: node_modules/, npm-debug.log, .env, dist/, build/
        - React/TypeScript: /client/node_modules/, /client/build/, /client/.env
        - IDE and editor: .idea/, .vscode/, *.swp, .DS_Store
        - Google Cloud: .firebase/, firebase-debug.log, service-account-*.json
        - Database: *.sqlite, *.db
        - Temporary: tmp/, .cache/
        - System: .DS_Store, Thumbs.db
      * Commit message: "Add comprehensive .gitignore file for full-stack JS/TS project"

### Application Bootstrap
- [x] 6. Create React App with TypeScript
      * Creation command: `npx create-react-app mine-to-mill/client --template typescript`
      * Project location: /Users/jonathangregory/Desktop/upside30/upside30/mine-to-mill/client
      * Installed dependencies command: 
        ```
        npm install @mui/material @mui/icons-material @emotion/react @emotion/styled react-router-dom @types/react-router-dom axios firebase chart.js react-chartjs-2 formik yup
        ```
      * Package versions (from package.json):
        - React: ^18.2.0
        - TypeScript: ^4.9.5
        - Material UI: ^5.x
        - React Router: ^6.x
      * Project structure created:
        - src/components/layout/MainLayout.tsx: Main layout with responsive drawer (width: 240px)
        - src/pages/dashboard/Dashboard.tsx: Dashboard with reconciliation factors and stockpile data
        - src/pages/auth/Login.tsx: Login form with email/password authentication
        - src/pages/errors/NotFound.tsx: 404 page with navigation back to dashboard
        - src/types/index.ts: TypeScript interfaces for all data models
        - src/theme.ts: Custom Material UI theme with primary (#1976d2) and secondary (#f57c00) colors
      * Build command: `npm run build` (successful with optimized production build)
      * Build output: 144.08 kB main.js, 1.77 kB chunk.js, 263 B main.css (after gzip)
- [x] 7. Set up Express.js backend
      * Project location: /Users/jonathangregory/Desktop/upside30/upside30/mine-to-mill/server
      * Initialization command: `npm init -y`
      * TypeScript configuration: 
        - Created with `npx tsc --init`
        - Customized for ES2018 target, CommonJS module, src/dist directories
        - Path aliases configured with @/* for src/* imports
      * Dependencies installed:
        ```
        npm install express cors helmet morgan dotenv pg pg-hstore sequelize firebase-admin jsonwebtoken express-validator multer winston
        ```
      * Dev dependencies installed:
        ```
        npm install --save-dev typescript ts-node nodemon @types/express @types/cors @types/helmet @types/morgan @types/pg @types/jsonwebtoken @types/multer @types/node eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin jest ts-jest @types/jest supertest @types/supertest rimraf
        ```
      * Project structure created:
        - src/app.ts: Express application setup with middleware and routes
        - src/index.ts: Server startup with error handling
        - src/config/config.ts: Environment configuration with TypeScript interfaces
        - src/database/connection.ts: Sequelize database connection
        - src/models/: Database models with TypeScript interfaces
        - src/controllers/: API controllers with CRUD operations
        - src/routes/: Express routes with validation
        - src/middleware/: Custom middleware including error handling
      * Features implemented:
        - Environment-based configuration (.env.example provided)
        - Database connection with Sequelize ORM
        - Company model with CRUD operations
        - Request validation with express-validator
        - Centralized error handling
        - Health check endpoint
        - API versioning (/api/v1/...)
      * Build command: `npm run build` (successful TypeScript compilation)
- [x] 8. Install necessary dependencies
      * Frontend dependencies:
        - UI Framework: @mui/material, @mui/icons-material, @emotion/react, @emotion/styled
        - Routing: react-router-dom, @types/react-router-dom
        - API Communication: axios
        - Authentication: firebase
        - Data Visualization: chart.js, react-chartjs-2
        - Form Handling: formik, yup
        - Core: react, react-dom, typescript
      * Backend dependencies:
        - Server Framework: express, @types/express
        - Database: pg, pg-hstore, sequelize
        - Security: helmet, cors, jsonwebtoken, @types/jsonwebtoken
        - Authentication: firebase-admin
        - Validation: express-validator
        - File Handling: multer, @types/multer
        - Logging: morgan, winston, @types/morgan
        - Configuration: dotenv
      * Development tools:
        - TypeScript: typescript, ts-node, @types/node
        - Development Server: nodemon
        - Testing: jest, ts-jest, @types/jest, supertest, @types/supertest
        - Linting: eslint, @typescript-eslint/parser, @typescript-eslint/eslint-plugin
        - Build Tools: rimraf
      * All dependencies installed and configured in respective package.json files
      * Node.js engine requirement: >=16.0.0

### Database Setup
- [x] 9. Provision PostgreSQL on Cloud SQL
      * Instance name: m2m-postgres-dev
      * Region: australia-southeast1 (Sydney, Australia)
      * Database version: PostgreSQL 14
      * Machine type: db-f1-micro (shared-core, 1 vCPU, 0.6 GB memory)
      * Creation command: 
        ```
        gcloud sql instances create m2m-postgres-dev --database-version=POSTGRES_14 --tier=db-f1-micro --region=australia-southeast1 --project=mine-to-mill-recon-jg-2024
        ```
      * Connection name: mine-to-mill-recon-jg-2024:australia-southeast1:m2m-postgres-dev
      * Public IP address: 34.87.253.212
      * Database created: mine_to_mill
        ```
        gcloud sql databases create mine_to_mill --instance=m2m-postgres-dev --project=mine-to-mill-recon-jg-2024
        ```
      * Database user: postgres (default)
      * Password set: M2mComplex!Password123
        ```
        gcloud sql users set-password postgres --instance=m2m-postgres-dev --password=M2mComplex!Password123 --project=mine-to-mill-recon-jg-2024
        ```
      * Network access: Allowed from any IP (0.0.0.0/0) for development
        ```
        gcloud sql instances patch m2m-postgres-dev --authorized-networks=0.0.0.0/0 --project=mine-to-mill-recon-jg-2024
        ```
      * Connection string: postgresql://postgres:M2mComplex!Password123@34.87.253.212:5432/mine_to_mill
      * Environment variables updated in .env file
- [ ] 10. Create dimension tables based on simplified schema (Company, Region, Operation)
- [ ] 11. Create reference tables (OreSource, OreType, MineType, Mine, MineZone, Stockpile)
- [ ] 12. Create Period and MonthlyUpload tables for tracking data submissions
- [ ] 12a. Deploy database schema migrations to Cloud SQL (Ready to deploy using Cloud Shell)
      * SQL script created: mine-to-mill/server/src/scripts/schema.sql
      * Deployment script created: mine-to-mill/server/src/scripts/deploy-to-cloud-sql.sh
      * To complete: Run the deployment script in Google Cloud Shell

## Backend Development

### Core API Structure
- [ ] 13. Set up Express server configuration
- [ ] 14. Configure middleware
- [ ] 15. Implement Firebase Authentication
- [ ] 16. Create basic role-based access control

### Data Management API
- [ ] 17. Create CRUD endpoints for dimension and reference tables
- [ ] 18. Implement monthly data upload API with validation
- [ ] 19. Create endpoints for each data section (Satellite, ROM, CTG, etc.)
- [ ] 20. Develop data retrieval API for reporting
- [ ] 21. Deploy backend to Cloud Run

## Frontend Development

### Frontend Setup
- [ ] 22. Organize folder structure
- [ ] 23. Configure routing with React Router
- [ ] 24. Set up Material UI theme

### UI Components
- [ ] 25. Implement authentication UI
- [ ] 26. Create core layout components
- [ ] 27. Develop monthly data upload forms
- [ ] 28. Build data tables for viewing uploaded data
- [ ] 29. Create stockpile visualization components

## Workflow Implementation

### Data Upload Workflow
- [ ] 30. Create workflow stepper for monthly data upload
- [ ] 31. Implement CSV import/export functionality
- [ ] 32. Build data validation and error reporting UI

### Reconciliation and Reporting
- [ ] 33. Implement basic reconciliation calculations
- [ ] 34. Create monthly data approval workflow
- [ ] 35. Develop reporting dashboards for key metrics
- [ ] 36. Build historical data comparison views

## Integration and Deployment

### Integration
- [ ] 37. Connect all frontend components with backend
- [ ] 38. Implement error handling and loading states
- [ ] 39. Optimize performance for large datasets

### Deployment
- [ ] 40. Deploy frontend to Firebase Hosting
- [ ] 41. Create system documentation
- [ ] 42. Set up monitoring and logging

## Testing and Refinement

### Testing
- [ ] 43. Perform manual testing of monthly data upload workflow
- [ ] 44. Test reconciliation calculations with sample data
- [ ] 45. Verify data integrity across the system

### Data and Security
- [ ] 46. Create test data for demonstrations
- [ ] 47. Review authentication and authorization implementation
- [ ] 48. Optimize database queries for reporting

## Final Touches

### Refinements
- [ ] 49. Polish UI for better user experience
- [ ] 50. Enhance error handling and user feedback
- [ ] 51. Optimize application performance

### Documentation and Handover
- [ ] 52. Complete user guide with workflow instructions
- [ ] 53. Document known limitations of simplified schema
- [ ] 54. Create roadmap for future enhancements
- [ ] 55. Prepare demonstration with sample mining operation
- [ ] 56. Final project handover 